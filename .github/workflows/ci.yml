name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Test across different Linux distributions
  test-linux-distros:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]
        node-version: [16, 18, 20]
        python-version: [3.8, 3.9, '3.10', '3.11']
      fail-fast: false
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential curl git
        
    - name: Install Node.js dependencies
      run: npm ci

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r server/requirements.txt

    - name: Run dependency verification
      run: |
        chmod +x setup.sh
        ./setup.sh --verify-only

    - name: Run linting
      run: |
        npm run lint
        
    - name: Run TypeScript checks
      run: npx tsc --noEmit

    - name: Run frontend tests
      run: npm test

    - name: Run backend tests
      run: npm run test:server

    - name: Run Python tests
      run: |
        cd server
        python -m pytest tests/ -v --tb=short

    - name: Test build process
      run: npm run build

    - name: Test resource detection
      run: |
        node -e "
          const { resourceDetector } = require('./dist/server/resource_detector.js');
          resourceDetector.detectResources().then(r => {
            console.log('Resource detection successful:', Object.keys(r));
            process.exit(0);
          }).catch(e => {
            console.error('Resource detection failed:', e);
            process.exit(1);
          });
        "

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run npm audit
      run: npm audit --audit-level=moderate

    - name: Run Python security scan
      run: |
        pip install safety bandit
        safety check -r server/requirements.txt
        bandit -r server/ -f json -o bandit-report.json || true

    - name: Upload security results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json

  # Performance testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        pip install -r server/requirements.txt

    - name: Start application
      run: |
        npm run build
        npm start &
        sleep 10

    - name: Run performance tests
      run: |
        # Test API response times
        curl -w "@.github/scripts/curl-format.txt" -o /dev/null -s "http://localhost:5000/api/health"
        
        # Test resource endpoints
        curl -w "@.github/scripts/curl-format.txt" -o /dev/null -s "http://localhost:5000/api/system/metrics"

  # Integration testing with different memory configurations
  memory-constraint-test:
    name: Memory Constraint Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        memory-limit: [512m, 1g, 2g]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        npm ci
        pip install -r server/requirements.txt

    - name: Test with memory limit ${{ matrix.memory-limit }}
      run: |
        # Set memory limit using systemd-run (simulation)
        echo "Testing with memory limit: ${{ matrix.memory-limit }}"
        
        # Build and test resource detection
        npm run build
        
        # Test memory optimization
        node -e "
          const { memoryManager } = require('./dist/server/memory_manager.js');
          memoryManager.getMemoryMetrics().then(metrics => {
            console.log('Memory metrics:', metrics);
            if (metrics.available < 256) {
              console.log('Low memory detected - optimization would be triggered');
            }
          });
        "

  # Docker testing
  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM node:18-slim

        # Install Python and system dependencies
        RUN apt-get update && apt-get install -y \
            python3 \
            python3-pip \
            build-essential \
            && rm -rf /var/lib/apt/lists/*

        WORKDIR /app

        # Copy package files
        COPY package*.json ./
        COPY server/requirements.txt ./server/

        # Install dependencies
        RUN npm ci --only=production
        RUN pip3 install -r server/requirements.txt

        # Copy source code
        COPY . .

        # Build the application
        RUN npm run build

        EXPOSE 5000

        CMD ["npm", "start"]
        EOF

    - name: Build Docker image
      run: docker build -t ml-platform-test .

    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 5000:5000 ml-platform-test
        sleep 10
        curl -f http://localhost:5000/api/health || exit 1
        docker stop test-container

  # Release preparation
  release-check:
    name: Release Check
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: [test-linux-distros, security-scan, performance-test]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check version consistency
      run: |
        PACKAGE_VERSION=$(node -p "require('./package.json').version")
        echo "Package version: $PACKAGE_VERSION"
        
        # Check if version tag exists
        if git tag | grep -q "v$PACKAGE_VERSION"; then
          echo "Version tag v$PACKAGE_VERSION already exists"
          exit 1
        fi

    - name: Generate changelog
      run: |
        echo "## Changes in this release" > RELEASE_NOTES.md
        git log --oneline --since="1 week ago" >> RELEASE_NOTES.md

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          RELEASE_NOTES.md
          dist/

  # Deployment readiness check
  deployment-check:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [test-linux-distros]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check environment variables
      run: |
        echo "Checking required environment variables..."
        
        # List of required environment variables for production
        REQUIRED_VARS=(
          "NODE_ENV"
          "DATABASE_URL"
          "SESSION_SECRET"
        )
        
        MISSING_VARS=()
        for var in "${REQUIRED_VARS[@]}"; do
          if [[ -z "${!var:-}" ]]; then
            MISSING_VARS+=("$var")
          fi
        done
        
        if [[ ${#MISSING_VARS[@]} -gt 0 ]]; then
          echo "Missing required environment variables: ${MISSING_VARS[*]}"
          echo "See LOCAL_SETUP.md for configuration details"
        else
          echo "All required environment variables are available"
        fi

    - name: Test production build
      run: |
        NODE_ENV=production npm run build
        
        # Verify critical files exist
        test -f dist/server/index.js || exit 1
        test -f dist/client/index.html || exit 1

    - name: Resource requirements check
      run: |
        echo "Checking minimum system requirements..."
        
        # Check available disk space (minimum 1GB)
        AVAILABLE_SPACE=$(df . | tail -1 | awk '{print $4}')
        if [[ $AVAILABLE_SPACE -lt 1048576 ]]; then
          echo "WARNING: Less than 1GB disk space available"
        fi
        
        # Check memory (minimum 512MB)
        AVAILABLE_MEMORY=$(free -m | awk 'NR==2{print $7}')
        if [[ $AVAILABLE_MEMORY -lt 512 ]]; then
          echo "WARNING: Less than 512MB memory available"
        fi